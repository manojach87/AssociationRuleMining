/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package kddproject;

import java.awt.Color;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.Popup;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;


/**
 *
 * @author Manoj Acharya
 */
public class Kdd extends javax.swing.JFrame {

    JFileChooser fileChooser;
    static Scanner input;
    public static String attributeFilePath="";
    public static String dataFilePath="";
    public static List<String> attributeNames = new ArrayList<String>();
    public static List<String> stableAttributes = new ArrayList<String>();
    public static List<String> flexibleAttributes = new ArrayList<String>();
    public static Kdd kdd;
    public static String decisionAtribute,decisionFrom,decisionTo, delimiter;
    public boolean hasHeader = false;
    public static String userStableAttribute;
    public static int minimum_Confidence=0,minimum_Support=0;
    public static StringBuilder stringBuilder = new StringBuilder();
    public static ArrayList<ArrayList<String>> data = new ArrayList<ArrayList<String>>(); 


    static Map<String, HashSet<String>> distinctAttributeValues = new HashMap<String, HashSet<String>>();
    static Map<HashSet<String>, HashSet<String>> attributeValues = new HashMap<HashSet<String>, HashSet<String>>();
    static Map<HashSet<String>, HashSet<String>> reducedAttributeValues = new HashMap<HashSet<String>, HashSet<String>>();
    static Map<String, HashSet<String>> decisionValues = new HashMap<String, HashSet<String>>();
    static Map<ArrayList<String>, HashSet<String>> markedValues = new HashMap<ArrayList<String>, HashSet<String>>();
    public static Map<ArrayList<String>,String> certainRules = new HashMap<ArrayList<String>,String>();
    public static Map<ArrayList<String>,HashSet<String>> possibleRules = new HashMap<ArrayList<String>,HashSet<String>>();

    public void initVariables(){
        attributeFilePath   ="";
        dataFilePath        ="";
        attributeNames      = new ArrayList<String>();
        stableAttributes    = new ArrayList<String>();
        flexibleAttributes  = new ArrayList<String>();
        decisionAtribute    = "";
        decisionFrom        = "";
        decisionTo          = "";
        delimiter           = "";
        hasHeader           = false;
        userStableAttribute = "";
        minimum_Confidence  =0;
        minimum_Support     =0;
        stringBuilder       = new StringBuilder();
        data                = new ArrayList<ArrayList<String>>(); 


        distinctAttributeValues = new HashMap<String, HashSet<String>>();
        attributeValues         = new HashMap<HashSet<String>, HashSet<String>>();
        reducedAttributeValues  = new HashMap<HashSet<String>, HashSet<String>>();
        decisionValues          = new HashMap<String, HashSet<String>>();
        markedValues            = new HashMap<ArrayList<String>, HashSet<String>>();
        certainRules            = new HashMap<ArrayList<String>,String>();
        possibleRules           = new HashMap<ArrayList<String>,HashSet<String>>();
        dataFilePathTextField   .setText("");
        attrFilePathTextField   .setText("");
        attrValues              .setText("");

    }
    /**
     * Creates new form NewJFrame
     */
    public Kdd() {
        initComponents();
        for( int i=0; i<jPanel1.getComponents().length; i++)
        {
            jPanel1.getComponents()[i].setEnabled(false);
        }
        for( int i=0; i<jPanel2.getComponents().length; i++)
        {
            jPanel2.getComponents()[i].setEnabled(false);
        }
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jOptionPane1 = new javax.swing.JOptionPane();
        jPanel3 = new javax.swing.JPanel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0));
        jLabelLoading = new javax.swing.JLabel();
        panel1 = new java.awt.Panel();
        attrFileLabel = new java.awt.Label();
        attrFilePathTextField = new javax.swing.JTextField();
        attrFileBrowseBtn = new javax.swing.JButton();
        label4 = new java.awt.Label();
        dataFilePathTextField = new javax.swing.JTextField();
        dataBrowseBtn = new javax.swing.JButton();
        submitBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        delimiterComboBox = new javax.swing.JComboBox<>();
        delimiterOtherText = new javax.swing.JTextField();
        hasHeaderCheckbox = new javax.swing.JCheckBox();
        label1 = new java.awt.Label();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jPanel1 = new javax.swing.JPanel();
        label2 = new java.awt.Label();
        confidenceTxtField = new java.awt.TextField();
        label6 = new java.awt.Label();
        label9 = new java.awt.Label();
        label5 = new java.awt.Label();
        decisionValTo = new java.awt.TextField();
        supportTxtField = new java.awt.TextField();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButton2 = new javax.swing.JButton();
        label7 = new java.awt.Label();
        decisionValFrom = new java.awt.TextField();
        label8 = new java.awt.Label();
        attrValues = new java.awt.Label();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        label11 = new java.awt.Label();
        stableAttrs = new java.awt.TextField();
        label10 = new java.awt.Label();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Kdd Project - Group 1: Action Rules ");
        setBackground(new java.awt.Color(255, 255, 255));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jLabelLoading.setFont(new java.awt.Font("SansSerif", 3, 13)); // NOI18N
        jLabelLoading.setForeground(new java.awt.Color(0, 204, 0));
        jLabelLoading.setText("Loading...");
        jLabelLoading.setToolTipText("");

        panel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        attrFileLabel.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        attrFileLabel.setForeground(java.awt.Color.black);
        attrFileLabel.setText("Attribute File");
        panel1.add(attrFileLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, -1, -1));

        attrFilePathTextField.setEditable(false);
        attrFilePathTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attrFilePathTextFieldActionPerformed(evt);
            }
        });
        panel1.add(attrFilePathTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 70, 308, -1));

        attrFileBrowseBtn.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        attrFileBrowseBtn.setLabel("...");
        attrFileBrowseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attrFileBrowseBtnActionPerformed(evt);
            }
        });
        panel1.add(attrFileBrowseBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 70, 21, 20));

        label4.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        label4.setForeground(java.awt.Color.black);
        label4.setText("Data File ");
        panel1.add(label4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 84, -1));

        dataFilePathTextField.setEditable(false);
        panel1.add(dataFilePathTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 10, 308, -1));

        dataBrowseBtn.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        dataBrowseBtn.setText("...");
        dataBrowseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dataBrowseBtnActionPerformed(evt);
            }
        });
        panel1.add(dataBrowseBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 10, 21, 20));

        submitBtn.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        submitBtn.setText("Load");
        submitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitBtnActionPerformed(evt);
            }
        });
        panel1.add(submitBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 130, 116, 25));

        jLabel1.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        jLabel1.setText("Delimiter");
        panel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 84, -1));

        delimiterComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { ",", "\\t", "|", "Other" }));
        delimiterComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delimiterComboBoxActionPerformed(evt);
            }
        });
        panel1.add(delimiterComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 100, 150, -1));

        delimiterOtherText.setText("Other");
        panel1.add(delimiterOtherText, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 100, 132, -1));

        hasHeaderCheckbox.setText("Check if first row in data file contains headers.");
        hasHeaderCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hasHeaderCheckboxActionPerformed(evt);
            }
        });
        panel1.add(hasHeaderCheckbox, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 40, -1, -1));

        label1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        label1.setText("Files to process");

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        label2.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        label2.setForeground(java.awt.Color.black);
        label2.setText("Available Attributes are:");
        jPanel1.add(label2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 42, 210, -1));

        confidenceTxtField.setFont(new java.awt.Font("Comic Sans MS", 3, 12)); // NOI18N
        confidenceTxtField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confidenceTxtFieldActionPerformed(evt);
            }
        });
        confidenceTxtField.addTextListener(new java.awt.event.TextListener() {
            public void textValueChanged(java.awt.event.TextEvent evt) {
                confidenceTxtFieldTextValueChanged(evt);
            }
        });
        jPanel1.add(confidenceTxtField, new org.netbeans.lib.awtextra.AbsoluteConstraints(385, 11, 75, -1));

        label6.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        label6.setForeground(java.awt.Color.black);
        label6.setText("Min Confidence");
        jPanel1.add(label6, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 11, -1, -1));

        label9.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        label9.setForeground(java.awt.Color.black);
        label9.setText("To");
        jPanel1.add(label9, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 100, -1, -1));

        label5.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        label5.setForeground(java.awt.Color.black);
        label5.setText("Min Support");
        jPanel1.add(label5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 11, 90, -1));

        decisionValTo.setFont(new java.awt.Font("Comic Sans MS", 3, 12)); // NOI18N
        decisionValTo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decisionValToActionPerformed(evt);
            }
        });
        decisionValTo.addTextListener(new java.awt.event.TextListener() {
            public void textValueChanged(java.awt.event.TextEvent evt) {
                decisionValToTextValueChanged(evt);
            }
        });
        jPanel1.add(decisionValTo, new org.netbeans.lib.awtextra.AbsoluteConstraints(385, 100, 75, -1));

        supportTxtField.setFont(new java.awt.Font("Comic Sans MS", 3, 12)); // NOI18N
        supportTxtField.addTextListener(new java.awt.event.TextListener() {
            public void textValueChanged(java.awt.event.TextEvent evt) {
                supportTxtFieldTextValueChanged(evt);
            }
        });
        jPanel1.add(supportTxtField, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 11, 75, -1));

        jComboBox1.setFont(new java.awt.Font("Comic Sans MS", 3, 13)); // NOI18N
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        jPanel1.add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 70, 230, -1));

        jButton2.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jButton2.setText("Get Attributes");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(352, 140, -1, -1));

        label7.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        label7.setForeground(java.awt.Color.black);
        label7.setText("Choose Decision Attribute");
        jPanel1.add(label7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 163, -1));

        decisionValFrom.setFont(new java.awt.Font("Comic Sans MS", 3, 12)); // NOI18N
        decisionValFrom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decisionValFromActionPerformed(evt);
            }
        });
        decisionValFrom.addTextListener(new java.awt.event.TextListener() {
            public void textValueChanged(java.awt.event.TextEvent evt) {
                decisionValFromTextValueChanged(evt);
            }
        });
        jPanel1.add(decisionValFrom, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 100, 75, -1));

        label8.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        label8.setForeground(java.awt.Color.black);
        label8.setText("Decision Value From");
        jPanel1.add(label8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 141, -1));

        attrValues.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        attrValues.setForeground(java.awt.Color.black);
        jPanel1.add(attrValues, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 42, 230, -1));

        jPanel2.setEnabled(false);
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jList1.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jScrollPane1.setViewportView(jList1);

        jPanel2.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(193, 11, 270, 163));

        label11.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        label11.setForeground(java.awt.Color.black);
        label11.setText("Enter Comma separated Stable Attribute(s)");
        jPanel2.add(label11, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 181, 299, 30));

        stableAttrs.setFont(new java.awt.Font("Comic Sans MS", 3, 12)); // NOI18N
        stableAttrs.addTextListener(new java.awt.event.TextListener() {
            public void textValueChanged(java.awt.event.TextEvent evt) {
                stableAttrsTextValueChanged(evt);
            }
        });
        jPanel2.add(stableAttrs, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 210, 453, 30));

        label10.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        label10.setForeground(java.awt.Color.black);
        label10.setText("Available Stable Attributes:");
        jPanel2.add(label10, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 11, -1, -1));

        jButton1.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jButton1.setText("Generate Action Rules");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(308, 250, -1, -1));

        jButton3.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jButton3.setText("Reset");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 250, -1, -1));

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(17, 17, 17)
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(label1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jPanel3Layout.createSequentialGroup()
                                .add(383, 383, 383)
                                .add(jLabelLoading)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jSeparator1)
                            .add(jSeparator2)
                            .add(jSeparator3)
                            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(panel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)))
                .add(filler1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel3Layout.createSequentialGroup()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(filler1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(label1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(panel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 151, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jSeparator2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jSeparator3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jLabelLoading)))
                .addContainerGap())
        );

        jLabelLoading.getAccessibleContext().setAccessibleName("jLabelLoading");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(jPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

   
    private void attrFileBrowseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attrFileBrowseBtnActionPerformed
        // TODO add your handling code here
        fileChooser = new JFileChooser();
        int returnValue = fileChooser.showOpenDialog(Kdd.this);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
          File selectedFile = fileChooser.getSelectedFile();
          attributeFilePath = selectedFile.getAbsolutePath();
          attrFilePathTextField.setText(attributeFilePath);
          //readAttributes();
    }              
        
    }//GEN-LAST:event_attrFileBrowseBtnActionPerformed

    private void dataBrowseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dataBrowseBtnActionPerformed
        // TODO add your handling code here:
         fileChooser = new JFileChooser();
        int returnValue = fileChooser.showOpenDialog(Kdd.this);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
          File selectedFile = fileChooser.getSelectedFile();
          dataFilePath = selectedFile.getAbsolutePath();
          dataFilePathTextField.setText(dataFilePath);
          //readData();
          //readData(dataFilePath,delimiter,hasHeader);
    }            
    }//GEN-LAST:event_dataBrowseBtnActionPerformed

    private void submitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitBtnActionPerformed
        // TODO add your handling code here:
        //Read stable,flexible and decision attributes
        //label2.setText("Available Attributes are:" +" "+attributeNames.toString());
        
        
        
        boolean filesExist = false;
        if(hasHeader){
            filesExist = checkFile(dataFilePath) ;
        }
        else filesExist = checkFile(attributeFilePath) && checkFile(dataFilePath) ;

        if (filesExist)
        {
            for( int i=0; i<jPanel1.getComponents().length; i++)
            {
                jPanel1.getComponents()[i].setEnabled(true);
            }
            readData(dataFilePath,delimiter,hasHeader);
            attrValues.setText(attributeNames.toString());
            attributeNames.forEach((attr) -> {
                jComboBox1.addItem(attr);
            });
        } else{
            jOptionPane1.showMessageDialog(null,"Have you chosen your files correctly?","File Not Found",JOptionPane.ERROR_MESSAGE);
        }
        //setStableAttributes(attributeNames);
        //Find Certain and Possible rules
		
    }//GEN-LAST:event_submitBtnActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
        decisionAtribute = jComboBox1.getSelectedItem().toString();
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        
        for( int i=0; i<jPanel2.getComponents().length; i++)
        {
            jPanel2.getComponents()[i].setEnabled(true);
        }
        setDecisionAttribute(attributeNames); 
        String[] flexArray = new String[flexibleAttributes.size()];
        for(int i=0;i<flexibleAttributes.size();i++){
            flexArray[i] = flexibleAttributes.get(i);
        }
            jList1.setListData(flexArray);
        jScrollPane1.setViewportView(jList1);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        setStableAttributes(attributeNames);
        findRules();
        generateActionRules();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void decisionValFromTextValueChanged(java.awt.event.TextEvent evt) {//GEN-FIRST:event_decisionValFromTextValueChanged
        // TODO add your handling code here:
        decisionFrom = decisionValFrom.getText();
    }//GEN-LAST:event_decisionValFromTextValueChanged

    private void decisionValToTextValueChanged(java.awt.event.TextEvent evt) {//GEN-FIRST:event_decisionValToTextValueChanged
        // TODO add your handling code here:
        decisionTo = decisionValTo.getText();
    }//GEN-LAST:event_decisionValToTextValueChanged

    private void stableAttrsTextValueChanged(java.awt.event.TextEvent evt) {//GEN-FIRST:event_stableAttrsTextValueChanged
        // TODO add your handling code here:
        userStableAttribute = stableAttrs.getText();
    }//GEN-LAST:event_stableAttrsTextValueChanged

    private void supportTxtFieldTextValueChanged(java.awt.event.TextEvent evt) {//GEN-FIRST:event_supportTxtFieldTextValueChanged
        // TODO add your handling code here:
        minimum_Support = Integer.parseInt(supportTxtField.getText());
    }//GEN-LAST:event_supportTxtFieldTextValueChanged

    private void confidenceTxtFieldTextValueChanged(java.awt.event.TextEvent evt) {//GEN-FIRST:event_confidenceTxtFieldTextValueChanged
        // TODO add your handling code here:
        minimum_Confidence = Integer.parseInt(confidenceTxtField.getText());
    }//GEN-LAST:event_confidenceTxtFieldTextValueChanged

    private void decisionValToActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decisionValToActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_decisionValToActionPerformed

    private void decisionValFromActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decisionValFromActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_decisionValFromActionPerformed

    private void confidenceTxtFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confidenceTxtFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_confidenceTxtFieldActionPerformed

    private void attrFilePathTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attrFilePathTextFieldActionPerformed
        // TODO add your handling code here:
        attrFileBrowseBtnActionPerformed(evt);
    }//GEN-LAST:event_attrFilePathTextFieldActionPerformed

    private void delimiterComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delimiterComboBoxActionPerformed
        // TODO add your handling code here:
        String selection = (String) delimiterComboBox.getSelectedItem();
        if(!"Other".equals(selection))
            delimiter = selection;
        else delimiter = delimiterOtherText.getText();
        //System.out.println(delimiter);
    }//GEN-LAST:event_delimiterComboBoxActionPerformed

    private void hasHeaderCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hasHeaderCheckboxActionPerformed
        // TODO add your handling code here:
        System.out.println(hasHeaderCheckbox.isSelected());
        hasHeader=hasHeaderCheckbox.isSelected();
        attrFileBrowseBtn    .setEnabled(!hasHeader);
        attrFileLabel        .setEnabled(!hasHeader);
        attrFilePathTextField.setEnabled(!hasHeader);
        
    }//GEN-LAST:event_hasHeaderCheckboxActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        initVariables();
        //new Kdd();
        
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    private final JButton open = new JButton("Open");
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (
//                ClassNotFoundException | 
//                InstantiationException | 
//                IllegalAccessException |
//                javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(Kdd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
        
            try {
                UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
              } catch (ClassNotFoundException e) {
                e.printStackTrace();
              } catch (InstantiationException e) {
                e.printStackTrace();
              } catch (IllegalAccessException e) {
                e.printStackTrace();
              } catch (UnsupportedLookAndFeelException e) {
                e.printStackTrace();
              }

              //SwingUtilities.updateComponentTreeUI(frame);
        //</editor-fold>
        //</editor-fold>
        
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            kdd = new Kdd();
            kdd.setVisible(true);
            kdd.getContentPane().setBackground(Color.WHITE);
            kdd.jLabelLoading.setVisible(false);
        });
    }

    //Reading attributes and data
//	private static void readAttributes() {
//        try {
//            input = new Scanner(new File(attributeFilePath));
//            
//            while (input.hasNextLine()) {
//                attributeNames.add(input.nextLine());
//            }
//            printList(attributeNames);
//        } catch (FileNotFoundException ex) {
//            Logger.getLogger(Kdd.class.getName()).log(Level.SEVERE, null, ex);
//        }
//		
//	}
        
	private static void readAttributes(String fileName, String delim) {
		try {
                    System.out.println(fileName);
			Scanner headerScan = new Scanner(new File(fileName));
			//input.hasNext();
			//attributeNames.clear();
			if(headerScan.hasNextLine()) {
				String[] splitted = (headerScan.nextLine()).split(delim); // Read First Line and split by delimiter
                                attributeNames.addAll(Arrays.asList(splitted)); // Add to AttributeNames
                        //System.out.println(attributeNames);
			}
			headerScan.close();
		} catch (FileNotFoundException e) {
			printMessage("File Not Found");
			e.printStackTrace();
		} 
//		catch (NoSuchElementException e) {
//			printMessage("File Found But Empty Header! Please Update the headers and try Again.");
//			//e.printStackTrace();
//		}
		
	}

        private static void readData() {
		try {
			input = new Scanner(new File(dataFilePath));
			int lineNo = 0;
			
			while(input.hasNextLine()){
                                String nextLine = input.nextLine();
                                //System.out.println(nextLine);
                                String[] lineData;
                                //if(nextLine.contains(",")){
                                if(nextLine.contains(delimiter)){
                                    //lineData = nextLine.split(",");
                                    lineData = nextLine.split(delimiter);
                                    //System.out.println(lineData.toString());
                                }else{
                                     lineData = nextLine.split("\\s+");
                                }
				String key;
				
				lineNo++;
				ArrayList<String> tempList = new ArrayList<>();
				HashSet<String> set;
                                //System.out.println(lineData.length);
                                //System.out.println(attributeNames.size());
				
				for (int i=0;i<lineData.length;i++) {
                                       // System.out.println(lineData.length);
                                        //System.out.println(attributeNames.size());
					String currentAttributeValue = lineData[i];
					String attributeName = attributeNames.get(i);
					key = attributeName + currentAttributeValue;
					
					tempList.add(key);

					HashSet<String> mapKey = new HashSet<>();
					mapKey.add(key);
					setMap(attributeValues,lineData[i],mapKey,lineNo);
					
					if (distinctAttributeValues.containsKey(attributeName)) {
						set = distinctAttributeValues.get(attributeName);
						set.add(key);
						
					}else{
						set = new HashSet<>();
					}
					
					set.add(key);
					distinctAttributeValues.put(attributeName, set);
				}
		
				data.add(tempList);
			}
                        for(ArrayList<String> dataList: data){
                             printList(dataList);
                        }
			                
			
		} catch (FileNotFoundException e) {
			printMessage("File Not Found");
			e.printStackTrace();
		}
	}
    
	private static void readData(String fileName, String delim, boolean hasHeader ) {
		try {
                    //System.out.println(fileName);
			input = new Scanner(new File(fileName));
			int lineNo = 0;
			if (hasHeader==true) {
				if(input.hasNextLine()){
					input.nextLine(); // Read Header and do nothing
					readAttributes(fileName, delim);
				}
			}
			else {
				String headerFileName = getHeaderFile(hasHeader);
				readAttributes(headerFileName, delim);
			}
			while(input.hasNextLine()){
				String[] lineData = input.nextLine().split(delim);
				String key;
				
				lineNo++;
				ArrayList<String> tempList = new ArrayList<>();
				HashSet<String> set;
				
				for (int i=0;i<lineData.length;i++) {
					String currentAttributeValue = lineData[i];
					String attributeName = attributeNames.get(i);
					
					//int ii = getSetID(attributeName,currentAttributeValue);
					key = attributeName + currentAttributeValue;
					//key = attributeName + ii;
					//System.out.println(getSetID(attributeName,currentAttributeValue) + ' ' + attributeName + ' ' + currentAttributeValue);
					
					//System.out.println(ii);
					tempList.add(key);

					HashSet<String> mapKey = new HashSet<>();
					mapKey.add(key);
					setMap(attributeValues,lineData[i],mapKey,lineNo);
					
					if (distinctAttributeValues.containsKey(attributeName)) {
						set = distinctAttributeValues.get(attributeName);
						set.add(key);
						
					}else{
						set = new HashSet<>();
					}
					
					set.add(key);
					distinctAttributeValues.put(attributeName, set);
				}
		
				data.add(tempList);
				
			}
                        for(ArrayList<String> dataList: data){
                             printList(dataList);
                        }

			input.close();
			
		} catch (FileNotFoundException e) {
			printMessage("File Not Found");
			e.printStackTrace();
		}
	}
	private static String getHeaderFile(boolean fileHasHeader) {
		if(fileHasHeader)
			return null;
		else
			return attributeFilePath;
	}

        private static void setMap(Map<HashSet<String>, HashSet<String>> values,
			String string, HashSet<String> key, int lineNo) {
		HashSet<String> tempSet;
		
		if (values.containsKey(key)) {
			tempSet = values.get(key);						
		}else{
			tempSet = new HashSet<>();
		}
		
		tempSet.add("x"+lineNo);
		values.put(key, tempSet);
	}
        //Printing String, List and Map
	public static void printMessage(String content){
		System.out.println(content);
	}
        public static void printList(List<String> list){
		Iterator iterate = list.iterator();
		
		while(iterate.hasNext()){
			printMessage(iterate.next().toString());
		}
	}
	
	private static void printAttributeMap(Map<HashSet<String>, HashSet<String>> values) {
		for(Map.Entry<HashSet<String>, HashSet<String>> set : values.entrySet()){
			printMessage(set.getKey().toString() + " = " + set.getValue());
                        stringBuilder.append(set.getKey().toString())
                                     .append(" = ")
                                     .append(set.getValue())
                                     .append(System.lineSeparator());
		}
	}
	
	private static void printCertainRulesMap(Map<ArrayList<String>, String> value) {
          kdd.jLabelLoading.setText("Generating Certain Rules");
          kdd.jLabelLoading.setVisible(true);
            printMessage("\nCertain Rules:");
                stringBuilder.append(System.lineSeparator())
                             .append("Certain Rules:");
                Iterator iterator = value.entrySet().iterator();
                while(iterator.hasNext()){
                    Map.Entry set = (Map.Entry)iterator.next();
                    	int support = calculateSupportLERS((ArrayList<String>)set.getKey(),(String)set.getValue());
			String confidence = calculateConfidenceLERS((ArrayList<String>)set.getKey(),(String)set.getValue());
                        System.out.println(minimum_Confidence+" minConfidence "+minimum_Support+" minSupport ");
                        stringBuilder
                                    .append(minimum_Confidence)
                                    .append(" minConfidence ")
                                    .append(minimum_Support)
                                    .append(" minSupport ")
                                    .append(System.lineSeparator());
			if(Integer.parseInt(confidence) >= minimum_Confidence && support >= minimum_Support){
                            printMessage(set.getKey().toString() + " -> " + set.getValue() + "[Support:-" + support + ", Confidence:-" + confidence +"%]");
                            stringBuilder
                                    .append(set.getKey().toString())
                                    .append(" -> ").append(set.getValue())
                                    .append("[Support:-").append(support)
                                    .append(", Confidence:-")
                                    .append(confidence)
                                    .append("%]")
                                    .append(System.lineSeparator());
                        }else{
                        iterator.remove();
                        }
                    
                }
	}
	
	private static void printPossibleRulesMap(Map<ArrayList<String>, HashSet<String>> value) {
		 kdd.jLabelLoading.setText("Generating Possible Rules");
                 kdd.jLabelLoading.setVisible(true);
		if(!value.isEmpty()){
			printMessage("\nPossible Rules:");
                        stringBuilder
                                    .append(System.lineSeparator())
                                    .append("Possible Rules:")
                                    .append(System.lineSeparator());
                         Iterator iterator = value.entrySet().iterator();
                          while(iterator.hasNext()){
                            Map.Entry set = (Map.Entry)iterator.next();
                            Iterator<String> setIterator = ((HashSet<String>)set.getValue()).iterator();
                                        while(setIterator.hasNext()){
                                        String possibleValue = setIterator.next();
                                        int support = calculateSupportLERS((ArrayList<String>)set.getKey(),possibleValue);
					String confidence = calculateConfidenceLERS((ArrayList<String>)set.getKey(),possibleValue);
					
                                        if(Integer.parseInt(confidence) >= minimum_Confidence && support >= minimum_Support){
                                        printMessage(set.getKey().toString() + " -> " + possibleValue + "[Support:-" + support + ", Confidence:-" + confidence +"%]");
                                        stringBuilder.append(set.getKey().toString())
                                                .append(" -> ").append(possibleValue)
                                                .append("[Support:-").append(support)
                                                .append(", Confidence:-")
                                                .append(confidence)
                                                .append("%]")
                                                .append(System.lineSeparator());
                                        }else{
                                           setIterator.remove();
                                        }
                          }
                          }
		}
	}

	private static int findLERSSupport(ArrayList<String> tempList) {
		int count = 0;
		
		for(ArrayList<String> data : data){	
			if(data.containsAll(tempList))
				count++;
		}
		
		return count;
	}
	
	private static int calculateSupportLERS(ArrayList<String> key, String value) {
		ArrayList<String> tempList = new ArrayList<>();
		
		for(String val : key){
			tempList.add(val);
		}
		
		if(!value.isEmpty())
			tempList.add(value);
	
		return findLERSSupport(tempList);
		
	}


	private static String calculateConfidenceLERS(ArrayList<String> key,
			String value) {
		int num = calculateSupportLERS(key, value);
		int den = calculateSupportLERS(key, "");
                int confidence = 0;
                if(den!=0){
                 confidence = (num * 100)/den;   
                }
		
		return String.valueOf(confidence);
	}
        
        private static void findRules() {
		int loopCount = 0;
		
		while(!attributeValues.isEmpty()){
			printMessage("\nLoop " + (++loopCount) +":");
                        stringBuilder
                                .append(System.lineSeparator())
                                .append("Loop ")
                                .append(loopCount).append(":");
			printMessage("--------------------------");
                        stringBuilder.append("--------------------------");
			printAttributeMap(attributeValues);
			
			for (Map.Entry<HashSet<String>, HashSet<String>> set : attributeValues.entrySet()) {
				ArrayList<String> setKey = new ArrayList<>();
				setKey.addAll(set.getKey());
				
				if (set.getValue().isEmpty()) {
					continue;
				}else{
					for(Map.Entry<String, HashSet<String>> decisionSet : decisionValues.entrySet()){
						if(decisionSet.getValue().containsAll(set.getValue())){
							certainRules.put(setKey, decisionSet.getKey());
							markedValues.put(setKey, set.getValue());
							break;
						}
					}
				}
				
				if(!markedValues.containsKey(setKey)){
					HashSet<String> possibleRulesSet = new HashSet<>();
					for(Map.Entry<String, HashSet<String>> decisionSet : decisionValues.entrySet()){
						possibleRulesSet.add(decisionSet.getKey());
					}
					possibleRules.put(setKey, possibleRulesSet);
				}
				
			}
			
			removeMarkedValues();
			
			printCertainRulesMap(certainRules);
			printPossibleRulesMap(possibleRules);
                    try {
                        writeFile(stringBuilder.toString());
                    } catch (IOException ex) {
                        Logger.getLogger(Kdd.class.getName()).log(Level.SEVERE, null, ex);
                    }
			combinePossibleRules();
		}
          //       generateActionRules();
	}

	private static void removeMarkedValues() {
		for(Map.Entry<ArrayList<String>, HashSet<String>> markedSet : markedValues.entrySet()){
			attributeValues.remove(new HashSet<>(markedSet.getKey()));
		}
		
	}
	
	private static void combinePossibleRules() {
		Set<ArrayList<String>> keySet = possibleRules.keySet();
		ArrayList<ArrayList<String>> keyList = new ArrayList<>();
		keyList.addAll(keySet);
		
		for(int i = 0;i<possibleRules.size();i++){
			for(int j = (i+1);j<possibleRules.size();j++){
				HashSet<String> combinedKeys = new HashSet<>(keyList.get(i));
				combinedKeys.addAll(new HashSet<>(keyList.get(j)));
				
				if(!checkSameGroup(combinedKeys)){
					combineAttributeValues(combinedKeys);
				}
			}
		}
		
		possibleRules.clear();
		
		removeRedundantValues();
		clearAttributeValues();
              		
	}

	private static boolean checkSameGroup(HashSet<String> combinedKeys) {
		for(Map.Entry<String, HashSet<String>> singleAttribute : distinctAttributeValues.entrySet()){
			if(singleAttribute.getValue().containsAll(combinedKeys)){
				return true;
			}
		}
		
		return false;
	}
	
	private static void combineAttributeValues(HashSet<String> combinedKeys) {
		HashSet<String> combinedValues = new HashSet<>();
			
		for(Map.Entry<HashSet<String>, HashSet<String>> attributeValue : attributeValues.entrySet()){
			if(combinedKeys.containsAll(attributeValue.getKey())){
				if(combinedValues.isEmpty()){
					combinedValues.addAll(attributeValue.getValue());
				}else{
					combinedValues.retainAll(attributeValue.getValue());
				}
			}
		}
		reducedAttributeValues.put(combinedKeys, combinedValues);
	
	}

	private static void removeRedundantValues() {
		HashSet<String> mark = new HashSet<>();
		
		for(Map.Entry<HashSet<String>, HashSet<String>> reducedAttributeValue : reducedAttributeValues.entrySet()){
			for(Map.Entry<HashSet<String>, HashSet<String>> attributeValue : attributeValues.entrySet()){
				
				if(attributeValue.getValue().containsAll(reducedAttributeValue.getValue()) || reducedAttributeValue.getValue().isEmpty()){
					mark.addAll(reducedAttributeValue.getKey());
				}
			}
		}
		
		reducedAttributeValues.remove(mark);
		
		
	}
	
	private static void clearAttributeValues() {
		 attributeValues.clear();
		 for(Map.Entry<HashSet<String>, HashSet<String>> reducedAttributeValue : reducedAttributeValues.entrySet()){
			 attributeValues.put(reducedAttributeValue.getKey(), reducedAttributeValue.getValue());
		 }
		 reducedAttributeValues.clear();
	}
 private static void generateActionRules() {
        try {
            String rule = "";
            int loop1Count = 0;
            System.out.println(stableAttributes.toString());
            PrintWriter writer = new PrintWriter("ActionRules1.txt", "UTF-8");
            for (Map.Entry<ArrayList<String>, String> certainRules1 : certainRules.entrySet()) {
                loop1Count++;
                if (certainRules1.getValue().equals(decisionFrom)) {
                    int loop2Count = 0;
                    for (Map.Entry<ArrayList<String>, String> certainRules2 : certainRules.entrySet()) {
                        System.out.println(certainRules2.getKey().equals(certainRules1.getKey()));
                        if ((!certainRules2.getValue().equals(decisionTo))) {
                            continue;
                        } else {
                            String primeAttribute = "";
                            
                            ArrayList<String> checkCertainValues1 = certainRules1
                                    .getKey();
                            for (String value1 : checkCertainValues1) {
                                
                                if (stableAttributes.contains(value1)) {
                                    continue;
                                } else {
                                    primeAttribute = checkAttribute(value1);
                                    
                                    ArrayList<String> checkCertainValues2 = certainRules2
                                            .getKey();
                                    for (String value2 : checkCertainValues2) {
                                        
                                        if (stableAttributes.contains(value2)
                                                || !(checkAttribute(value2)
                                                        .equals(primeAttribute))) {
                                            rule = formRule(rule, value2, value2);
                                            
                                        } else if (checkAttribute(value2).equals(
                                                primeAttribute)) {
                                            
                                            rule = formRule(rule, value1, value2);
                                        }
                                        
                                    }
                                }
                            }
                            
                            if (rule.indexOf(primeAttribute) != -1
                                    && !primeAttribute.isEmpty()) {
                                    writer.println("The first line");
                                    writer.println("The second line");
                                    writer.println(rule + " ==> " +decisionFrom + "->" + decisionTo);
                                System.out.println(rule + " ==> " +decisionFrom + "->" + decisionTo);
                            }
                            rule = "";
                        }
                        loop2Count++;
                    }
                } else {
                    continue;
                }
            }
        } catch (FileNotFoundException | UnsupportedEncodingException ex) {
            Logger.getLogger(Kdd.class.getName()).log(Level.SEVERE, null, ex);
        }
 }

    private static String checkAttribute(String value1) {
        for (Map.Entry<String, HashSet<String>> entryValue : distinctAttributeValues
                .entrySet()) {
            if (entryValue.getValue().contains(value1)) {
                return entryValue.getKey();
            }
        }
        return null;
    }

    private static String formRule(String rule, String value1, String value2) {
        if (!rule.isEmpty()) {
            rule += "^";
        }

        if (value1.equals(value2)) {
            if (stableAttributes.contains(value2)) {

                rule += "(" + value1 + "=" + value2 + ")";
            } else {
                rule += "(" + value1 + ",->" + value2 + ")";
            }
        } else {

            rule += "(" + value1 + "->" + value2 + ")";
        }

        return rule;
    }

    private  void setStableAttributes(List<String> attributes) {
        if(userStableAttribute.contains(",")){
            String[] keys = userStableAttribute.split(",");
                for(int i=0;i<keys.length;i++){
                    if(checkValid(attributes,keys[i])){
                    stableAttributes.addAll(distinctAttributeValues.get(keys[i]));
                    attributes.remove(userStableAttribute);
                    }else{
                        printMessage("Invalid Attribute name...\n");
                    }
                }
//                           }
        }else{
            if(checkValid(attributes,userStableAttribute)){
                stableAttributes.addAll(distinctAttributeValues.get(userStableAttribute));
                attributes.remove(userStableAttribute);
            }else{
                    printMessage("Invalid Attribute name...\n");
            }
        }
			
    }

    private static boolean checkValid(List<String> attributes,String userStableAttribute) {
        return attributes.contains(userStableAttribute);
    }

    private static void setDecisionAttribute(List<String> attributes) {
        if (checkValid(attributes,decisionAtribute)) {
            attributes.remove(decisionAtribute);
            flexibleAttributes = attributes;

            HashSet<String> decisionValues = distinctAttributeValues.get(decisionAtribute);
            removeDecisionValueFromAttributes(decisionValues);

        }else{
                printMessage("Invalid attrbibute.");
        }
		
    }

    private static void removeDecisionValueFromAttributes(HashSet<String> decisionValues) {
        for(String value : decisionValues){
            HashSet<String> newHash = new HashSet<>();
            newHash.add(value);
            Kdd.decisionValues.put(value, attributeValues.get(newHash));
            attributeValues.remove(newHash);
        }
    }

    public static void writeFile(String outputString) throws IOException {
         kdd.jLabelLoading.setText("Writing to File");
         kdd.jLabelLoading.setVisible(true);
        try {
                    File file = new File("ActionRules.txt");
                    FileWriter fileWriter = new FileWriter(file);
                    // Wrapping FileWriter to BufferedWriter to improve the efficiency
                    BufferedWriter outStream = new BufferedWriter(fileWriter);
                    // Writing outputs to file
                    outStream.write(outputString);
                    // Making sure we close the BufferedWriter to avoid memory leaks.
                    outStream.flush();
                    outStream.close();
            } catch (IOException e) {
                    e.printStackTrace();
            }
          kdd.jLabelLoading.setText("Program Completed. Please see output in ActionRules.txt");
          kdd.jLabelLoading.setVisible(true);
    }
    public boolean checkFile(String fileName){
        File file = new File(fileName);
        System.out.println(fileName +":"+file.exists());
        return (file.exists() && file.isFile());
    }
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton attrFileBrowseBtn;
    private java.awt.Label attrFileLabel;
    private javax.swing.JTextField attrFilePathTextField;
    private java.awt.Label attrValues;
    private java.awt.TextField confidenceTxtField;
    private javax.swing.JButton dataBrowseBtn;
    private javax.swing.JTextField dataFilePathTextField;
    private java.awt.TextField decisionValFrom;
    private java.awt.TextField decisionValTo;
    private javax.swing.JComboBox<String> delimiterComboBox;
    private javax.swing.JTextField delimiterOtherText;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JCheckBox hasHeaderCheckbox;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelLoading;
    private javax.swing.JList<String> jList1;
    private javax.swing.JOptionPane jOptionPane1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private java.awt.Label label1;
    private java.awt.Label label10;
    private java.awt.Label label11;
    private java.awt.Label label2;
    private java.awt.Label label4;
    private java.awt.Label label5;
    private java.awt.Label label6;
    private java.awt.Label label7;
    private java.awt.Label label8;
    private java.awt.Label label9;
    private java.awt.Panel panel1;
    private java.awt.TextField stableAttrs;
    private javax.swing.JButton submitBtn;
    private java.awt.TextField supportTxtField;
    // End of variables declaration//GEN-END:variables


}
